'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cheerio = require('cheerio');

var _cheerio2 = _interopRequireDefault(_cheerio);

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var _foolSlide = require('./shared/fool-slide');

var _foolSlide2 = _interopRequireDefault(_foolSlide);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TZ = 'America/Los_Angeles';

const getTimestamp = rawText => {
  const text = rawText.toLowerCase();

  if (text === 'today') {
    return _momentTimezone2.default.tz(TZ).endOf('day').unix();
  }

  if (text === 'yesterday') {
    return _momentTimezone2.default.tz(TZ).subtract(1, 'day').endOf('day').unix();
  }

  return _momentTimezone2.default.tz(text, 'YYYY.MM.DD', TZ).unix();
};

const slice = (input, startKey, endKey) => input.substring(input.indexOf(startKey) + startKey.length, input.indexOf(endKey));

const getAuthor = (input, startKey, endKey) => input.indexOf(startKey) ? slice(input, startKey, endKey).trim() : null;

const parseInfo = input => {
  const AUTHOR_KEY = 'Author: ';
  const ARTIST_KEY = 'Artist: ';
  const DESCRIPTION_KEY = 'Synopsis: ';

  const author = _utils2.default.formatAuthors([getAuthor(input, AUTHOR_KEY, ARTIST_KEY), getAuthor(input, ARTIST_KEY, DESCRIPTION_KEY)]);

  const rawDescription = input.split(DESCRIPTION_KEY).pop();
  const description = rawDescription.toLowerCase() === 'n/a' || rawDescription.length === 0 ? null : rawDescription;

  // $FlowFixMe: Flow doesn't recognize our `filter` call above.
  return { author, description };
};

const adapter = (0, _foolSlide2.default)({
  id: 'jaiminis-box',
  name: 'Jaiminiâ€™s Box',
  foolSlideBaseUrl: 'https://jaiminisbox.com/reader/',
  timeZone: TZ
});

const JaiminisBoxAdapter = Object.assign({}, adapter, {

  // NOTE: Jaimini's Box disabled FoolSlide's API so we have to scrape the
  // old-fashioned way. We override the default FoolSlide functions below.

  async getSeries(seriesSlug) {
    const url = this.constructUrl(seriesSlug);
    const html = await _utils2.default.getPage(url);
    const dom = _cheerio2.default.load(html);

    const $comicInfo = dom('.comic.info');
    const $infoSection = $comicInfo.find('.large.comic > .info');

    const title = $comicInfo.find('h1.title').text().trim();

    const { author, description } = parseInfo($infoSection.text());
    const status = 'UNKNOWN';

    const coverImageUrl = $comicInfo.find('.thumbnail img').attr('src')
    // NOTE: we swap the URL to get the thumbnail-sized image
    .replace(/\/([^/]+)\.(jpg|png)/, '/thumb_$1.$2');

    const chapterNodes = dom('.element', '#content .list .group');
    const chapters = chapterNodes.get().map(el => {
      const node = dom(el);

      const link = node.find('.title a');

      const url = link.attr('href');
      const title = link.attr('title').split(': ')[1];

      const slug = this.parseUrl(url).chapterSlug.replace(/\/$/, '');

      const [, volumeNumber, rawChapterNumber, rawSubChapterNumber] = slug.split('/');
      const chapterNumber = [rawChapterNumber, rawSubChapterNumber].filter(Boolean).join('.');

      const createdAtRawText = node.find('.meta_r').text().trim();
      const createdAtParsedText = _utils2.default.extractText(/, ([\d.]+|\w+)/, createdAtRawText);
      const createdAt = getTimestamp(createdAtParsedText);

      return { url, title, slug, chapterNumber, volumeNumber, createdAt };
    });

    return {
      slug: seriesSlug,
      title,
      description,
      author,
      status,
      coverImageUrl,
      url,
      chapters
    };
  },

  async getChapter(seriesSlug, chapterSlug) {
    const url = this.constructUrl(seriesSlug, chapterSlug);
    const html = await _utils2.default.getPage(url);

    const encodedBlob = _utils2.default.extractText(/var\s+pages\s+=\s+JSON\.parse\(atob\((.+)\)\);/, html);
    const decodedBlob = Buffer.from(encodedBlob, 'base64');
    const json = JSON.parse(decodedBlob.toString());

    const pages = json.map(image => ({
      id: image.id,
      width: Number(image.width),
      height: Number(image.height),
      url: image.url
    }));

    return { slug: chapterSlug, url, pages };
  }
});

exports.default = JaiminisBoxAdapter;
module.exports = exports['default'];