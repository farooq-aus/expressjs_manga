'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cheerio = require('cheerio');

var _cheerio2 = _interopRequireDefault(_cheerio);

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _errors = require('../errors');

var _errors2 = _interopRequireDefault(_errors);

var _cookie = require('cookie');

var _cookie2 = _interopRequireDefault(_cookie);

var _get = require('../get');

var _get2 = _interopRequireDefault(_get);

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TZ = 'UTC';

const t = d => d.text().trim();

const parseChapterTableString = input => {
  const parts = input.split(' - ');
  const title = parts.pop();
  const rest = parts.shift();

  const volumeMatch = rest.match(/Vol\. (\d+)/);
  const volumeNumber = volumeMatch ? volumeMatch[1] : undefined;
  const chapterMatch = rest.match(/Ch\. (\d+)/);
  const chapterNumber = chapterMatch ? chapterMatch[1] : undefined;

  return {
    title,
    volumeNumber,
    chapterNumber
  };
};

const parseChapterTableDate = input => {
  return _momentTimezone2.default.tz(input, 'MMM DD, YYYY', TZ).unix();
};

// Series URLs
// http://merakiscans.com/senryu-girl/
// http://merakiscans.com/ninja-shinobu-san-no-junjou/

// Reader URLs
// http://merakiscans.com/senryu-girl/2/

const MerakiScansAdapter = {
  id: 'meraki-scans',
  name: 'Meraki Scans',

  supportsUrl(url) {
    return _utils2.default.compareDomain(url, 'https://merakiscans.com/');
  },

  supportsReading() {
    return true;
  },

  parseUrl(url) {
    const u = _utils2.default.parseUrl(url);
    const parts = u.pathname.split('/').filter(Boolean);

    let seriesSlug;
    let chapterSlug = null;

    // There's no information for URLs shorter than one part, so throw a not found.
    (0, _utils.invariant)(parts.length > 1, new _errors2.default.NotFoundError(url));

    if (parts[0] === 'details') {
      seriesSlug = parts[1];
    } else {
      seriesSlug = parts[0];
      chapterSlug = parts[1];
    }

    return { seriesSlug, chapterSlug };
  },

  constructUrl(seriesSlug, chapterSlug) {
    const urlParts = chapterSlug ? [seriesSlug, chapterSlug] : ['details', seriesSlug];

    const url = [this._getHost()].concat(urlParts).filter(Boolean).join('/');

    return _utils2.default.normalizeUrl(url);
  },

  _getHost() {
    return 'https://merakiscans.com';
  },

  async getSeries(seriesSlug) {
    const seriesUrl = this.constructUrl(seriesSlug);

    const html = await _utils2.default.getPage(seriesUrl);
    const dom = _cheerio2.default.load(html);

    const $infoSection = dom('#detail_list');
    const $infoSectionRows = $infoSection.find('li');
    const $chapterRows = dom('#chapter_table > tbody > tr');

    const title = t(dom('#manga_name'));
    const description = t($infoSection.find('span:last-child'));
    const rawAuthor = t($infoSectionRows.eq(2));
    const rawArtist = t($infoSectionRows.eq(3));
    const authors = [rawAuthor, rawArtist].map(str => str.split(': ').pop());

    const author = _utils2.default.formatAuthors(authors);
    const status = _utils2.default.parseStatus(t($infoSectionRows.eq(4)));

    const coverImageUrl = this._getHost() + dom('#cover_img').attr('src');

    const chapters = $chapterRows.get().map(el => {
      const $link = dom(el);
      const $chapterDetails = $link.find('td').eq(0);
      const $chapterDate = $link.find('td').eq(1);

      const { title, volumeNumber, chapterNumber } = parseChapterTableString(t($chapterDetails));
      const createdAt = parseChapterTableDate(t($chapterDate));
      const slug = this.parseUrl(this._getHost() + $link.attr('data-href')).chapterSlug;
      const url = this.constructUrl(seriesSlug, slug);

      return { slug, title, chapterNumber, volumeNumber, url, createdAt };
    });

    return {
      slug: seriesSlug,
      url: seriesUrl,
      coverImageUrl,
      title,
      description,
      author,
      status,
      chapters
    };
  },

  async getChapter(seriesSlug, chapterSlug) {
    const url = this.constructUrl(seriesSlug, chapterSlug);

    (0, _utils.invariant)(seriesSlug, new Error('MerakiScans requires a valid series slug for chapters'));

    const response = await (0, _get2.default)(url, {
      headers: {
        // The `reading_type=long` cookie puts all the images on a single page.
        cookie: _cookie2.default.serialize('reading_type', 'long')
      }
    });
    const html = response.body;
    const dom = _cheerio2.default.load(html);

    const imageJSON = _utils2.default.extractText(/var\s+images\s+=\s+(.*);/, html);
    const imageFileNames = JSON.parse(imageJSON);

    const pages = imageFileNames.map(filename => ({
      id: filename,
      url: `${this._getHost()}/manga/${seriesSlug}/${chapterSlug}/${filename}`
    }));

    return { slug: chapterSlug, url, pages };
  }
};

exports.default = MerakiScansAdapter;
module.exports = exports['default'];