'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = makeFoolSlideAdapter;

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _errors = require('../../errors');

var _errors2 = _interopRequireDefault(_errors);

var _utils = require('../../utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function makeFoolSlideAdapter(options) {
  const normalizedBaseUrl = options.foolSlideBaseUrl.replace(/\/$/, '');
  const normalizedTimeZone = options.timeZone || 'UTC';

  const url = _utils2.default.parseUrl(normalizedBaseUrl);
  const normalizedHostName = url.origin;
  const normalizedPathName = url.pathname === '/' ? '' : url.pathname;

  const foolSlidePathRegex = ':type(read|series)/:seriesSlug/:chapterSlug([a-z]{2}/.+)?';
  const regex = `${normalizedPathName}/${foolSlidePathRegex}`;

  return {
    id: options.id,
    name: options.name,

    supportsUrl(url) {
      return _utils2.default.compareDomain(url, normalizedBaseUrl);
    },

    supportsReading() {
      return true;
    },

    parseUrl(url) {
      const matches = _utils2.default.pathMatch(url, regex);

      (0, _utils.invariant)(matches, new _errors2.default.InvalidUrlError(url));
      (0, _utils.invariant)(matches.seriesSlug, new _errors2.default.InvalidUrlError(url));

      const { seriesSlug } = matches;
      const chapterSlug = matches.type === 'read' ? matches.chapterSlug.split('/page/').shift() : null;

      return { seriesSlug, chapterSlug };
    },

    constructUrl(seriesSlug, chapterSlug) {
      const isChapter = chapterSlug !== null && chapterSlug !== undefined;

      const parts = [this._getBaseUrl(), isChapter ? 'read' : 'series', seriesSlug];

      if (isChapter) {
        parts.push(chapterSlug);
        parts.push('page/1');
      }

      return _utils2.default.normalizeUrl(parts.join('/'));
    },

    _getHost() {
      return normalizedHostName;
    },

    _getBaseUrl() {
      return this._getHost() + normalizedPathName;
    },

    async getSeries(seriesSlug) {
      const url = this.constructUrl(seriesSlug);

      const jsonUrl = `${this._getBaseUrl()}/api/reader/comic/stub/${seriesSlug}/format/json`;
      const json = await _utils2.default.getJSON(jsonUrl);

      const {
        name,
        description,
        author: rawAuthor,
        artist: rawArtist,
        thumb_url: thumbUrl
      } = json.comic;

      const title = name.trim();
      const author = _utils2.default.formatAuthors([rawAuthor, rawArtist]);
      const status = 'UNKNOWN';
      const coverImageUrl = thumbUrl || undefined;

      const chapters = json.chapters.map(data => {
        const {
          name: rawTitle,
          chapter: rawChapterNumber,
          language,
          volume: volumeNumber
        } = data.chapter;

        const title = rawTitle || undefined;
        const subchapter = data.chapter.subchapter === '0' ? null : data.chapter.subchapter;

        const slug = [language, volumeNumber, rawChapterNumber, subchapter].filter(Boolean).join('/');
        const chapterNumber = [rawChapterNumber, subchapter].filter(Boolean).join('.');

        const url = this.constructUrl(seriesSlug, slug);
        const createdAt = _momentTimezone2.default.tz(data.chapter.created, normalizedTimeZone).unix();

        return {
          url,
          title,
          slug,
          chapterNumber,
          volumeNumber,
          createdAt
        };
      });

      return {
        slug: seriesSlug,
        title,
        description,
        author,
        status,
        coverImageUrl,
        url,
        chapters
      };
    },

    async getChapter(seriesSlug, chapterSlug) {
      const url = this.constructUrl(seriesSlug, chapterSlug);
      const html = await _utils2.default.getPage(url);
      // FoolSlide embeds reader pages with a JSON blob of all the images. We can
      // parse this blob to get all the URLs.
      const json = _utils2.default.extractJSON(/var\s+pages\s+=\s+(.+);/, html);
      // Eventually we could try using the API like so:
      // https://reader.kireicake.com/api/reader/chapter/id/405/format/json
      // where 405 is the unique id for the chapter

      const pages = json.map(image => ({
        id: image.id,
        width: Number(image.width),
        height: Number(image.height),
        url: image.url
      }));

      return { slug: chapterSlug, url, pages };
    }
  };
}

module.exports = exports['default'];