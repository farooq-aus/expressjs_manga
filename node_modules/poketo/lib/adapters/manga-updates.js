'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cheerio = require('cheerio');

var _cheerio2 = _interopRequireDefault(_cheerio);

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _errors = require('../errors');

var _errors2 = _interopRequireDefault(_errors);

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Helper function to get trimmed text, since we use it throughout the adapter.
const t = d => d.text().trim();

const MangaUpdatesAdapter = {
  id: 'manga-updates',
  name: 'MangaUpdates',

  supportsUrl(url) {
    return _utils2.default.compareDomain(url, 'http://mangaupdates.com');
  },

  supportsReading() {
    return false;
  },

  parseUrl(url) {
    const matches = _utils2.default.parseUrl(url).searchParams;

    (0, _utils.invariant)(/\/series.html\?id=/.test(url), new _errors2.default.InvalidUrlError(url));

    const seriesSlug = matches.has('id') ? matches.get('id') : null;
    const chapterSlug = null;

    (0, _utils.invariant)(seriesSlug, new _errors2.default.InvalidUrlError(url));

    return { seriesSlug, chapterSlug };
  },

  constructUrl(seriesSlug) {
    (0, _utils.invariant)(typeof seriesSlug === 'string', new TypeError(`'seriesSlug' must be a string, not ${typeof seriesSlug}`));

    return _utils2.default.normalizeUrl(`${this._getHost()}/series.html?id=${seriesSlug}`);
  },

  _getHost() {
    return `https://www.mangaupdates.com`;
  },

  async getSeries(seriesSlug) {
    const url = this.constructUrl(seriesSlug);
    const html = await _utils2.default.getPage(`${this._getHost()}/series.html?id=${seriesSlug}`);
    const dom = _cheerio2.default.load(html);

    const $content = dom('#main_content');
    const $metadataColumnA = $content.find('.sContainer[text] .sContent');
    const $metadataColumnB = $content.find('.sContainer + .sContainer .sContent');

    const title = $content.find('.releasestitle.tabletitle').text();

    const description = t($metadataColumnA.first());
    const author = _utils2.default.formatAuthors([t($metadataColumnB.eq(5)), // Author
    t($metadataColumnB.eq(6))] // Artist
    );
    const status = _utils2.default.parseStatus(t($metadataColumnA.eq(6)));
    const coverImageUrl = $metadataColumnB.find('center img[width][height]').attr('src');

    const $updatedAt = $metadataColumnA.last();
    const updatedAt = _momentTimezone2.default.tz(t($updatedAt), 'MMMM Do YYYY, h:mma zz', 'America/Los_Angeles').unix();

    return {
      slug: seriesSlug,
      title,
      description,
      author,
      status,
      coverImageUrl,
      url,
      updatedAt
    };
  },

  async getChapter() {
    throw new _errors2.default.UnsupportedOperationError(this.name, 'fetching chapters');
  }
};

exports.default = MangaUpdatesAdapter;
module.exports = exports['default'];