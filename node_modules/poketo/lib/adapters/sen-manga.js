'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _url = require('url');

var _cheerio = require('cheerio');

var _cheerio2 = _interopRequireDefault(_cheerio);

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _cookie = require('cookie');

var _cookie2 = _interopRequireDefault(_cookie);

var _get = require('../get');

var _get2 = _interopRequireDefault(_get);

var _errors = require('../errors');

var _errors2 = _interopRequireDefault(_errors);

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SESSION_ID_KEY = 'PHPSESSID';

const t = d => d.text().trim();
const parseTitle = str => str && str.toLowerCase() !== 'raw' ? str : undefined;
const parseCreatedAt = str => {
  const parts = str.split(' ');

  if (parts[2] !== 'ago') {
    return 0;
  }

  const now = (0, _momentTimezone2.default)();
  const number = parseInt(parts[0], 10);
  const unit = parts[1];

  const createdAt = now.subtract(number, unit).startOf(unit).unix();

  return createdAt;
};

const proxyImageUrl = (url, sessionId, referer) => {
  const params = new _url.URLSearchParams();
  params.append('url', url);
  params.append('headers', JSON.stringify({
    Referer: referer,
    Cookie: _cookie2.default.serialize(SESSION_ID_KEY, sessionId)
  }));

  return `https://poketo-image-proxy.now.sh?${params.toString()}`;
};

const SenMangaAdapter = {
  id: 'sen-manga',
  name: 'Sen Manga',

  supportsUrl(url) {
    return _utils2.default.compareDomain(url, this._getHost());
  },

  supportsReading() {
    return true;
  },

  parseUrl(url) {
    const matches = _utils2.default.pathMatch(url, '/:seriesSlug/:chapterSlug?(/.+)?');

    (0, _utils.invariant)(matches, new _errors2.default.InvalidUrlError(url));
    (0, _utils.invariant)(matches.seriesSlug, new _errors2.default.InvalidUrlError(url));

    const { seriesSlug, chapterSlug = null } = matches;

    return { seriesSlug, chapterSlug };
  },

  constructUrl(seriesSlug, chapterSlug) {
    const url = [this._getHost(), seriesSlug, chapterSlug].filter(Boolean).join('/');

    return _utils2.default.normalizeUrl(url);
  },

  _getHost() {
    return 'https://raw.senmanga.com';
  },

  async getSeries(seriesSlug) {
    const url = this.constructUrl(seriesSlug);
    const html = await _utils2.default.getPage(url);
    const dom = _cheerio2.default.load(html);

    const $seriesInfo = dom('ul.series-info').first();
    const $seriesInfoRows = $seriesInfo.find('li');

    const title = t(dom('div.panel h1.title'));

    const description = t($seriesInfo.find('span[itemprop="description"]'));
    const author = _utils2.default.formatAuthors([t($seriesInfoRows.eq(4).find('a')), t($seriesInfoRows.eq(5).find('a'))]);
    const status = _utils2.default.parseStatus(t($seriesInfoRows.eq(7)));
    const coverImageUrl = `${this._getHost()}/covers/${seriesSlug}.jpg`;

    const $chapterList = dom('div.element');
    const chapters = $chapterList.get().map(el => {
      const $link = dom(el).find('a');
      const $meta = dom(el).find('.meta_r');

      const href = $link.attr('href');
      const linkParts = $link.attr('title').split(' - ');

      const title = parseTitle(linkParts[1]);
      const createdAt = parseCreatedAt(t($meta));
      const slug = this.parseUrl(href).chapterSlug;
      const chapterNumber = slug;
      const url = this.constructUrl(seriesSlug, slug);

      return { slug, title, chapterNumber, url, createdAt };
    });

    return {
      slug: seriesSlug,
      title,
      description,
      author,
      status,
      coverImageUrl,
      url,
      chapters
    };
  },

  async getChapter(seriesSlug, chapterSlug) {
    const url = this.constructUrl(seriesSlug, chapterSlug);

    const response = await (0, _get2.default)(url, {
      headers: {
        // The `viewer=1` cookie puts all the images on a single page.
        cookie: _cookie2.default.serialize('viewer', '1')
      }
    });

    const cookies = response.headers['set-cookie'];
    const sessionCookie = cookies.find(str => str.includes(SESSION_ID_KEY));
    const sessionId = _cookie2.default.parse(sessionCookie)[SESSION_ID_KEY];

    const html = response.body;

    (0, _utils.invariant)(html.indexOf('404 Error') === -1, new _errors2.default.NotFoundError(url));

    const dom = _cheerio2.default.load(html);

    const $script = dom('#reader > script');
    const scriptText = $script.html();
    const imageUrls = scriptText.match(/https?[^"]+/g);

    // We proxy image URLs because Sen Manga is really restrictive about
    // hotlinking. The `PHPSESSID` cookie needs to align with the image URL's
    // `token` attribute. Since we can't expect clients to handle all those
    // requirements, we pass a URL to a proxy to handle all the headers.
    const proxiedImageUrls = imageUrls.map(imageUrl => proxyImageUrl(imageUrl, sessionId, url));

    const pages = proxiedImageUrls.map(url => ({ id: url, url }));

    return { slug: chapterSlug, url, pages };
  }
};

exports.default = SenMangaAdapter;
module.exports = exports['default'];