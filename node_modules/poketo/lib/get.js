'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultHeaders = undefined;
exports.setDefaultHeaders = setDefaultHeaders;

var _got = require('got');

var _got2 = _interopRequireDefault(_got);

var _cloudflare = require('@ctrl/cloudflare');

var _toughCookie = require('tough-cookie');

var _toughCookie2 = _interopRequireDefault(_toughCookie);

var _package = require('../package');

var _package2 = _interopRequireDefault(_package);

var _errors = require('./errors');

var _errors2 = _interopRequireDefault(_errors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const version = process.env.NODE_ENV === 'test' ? 'test' : _package2.default.version;

const userAgent = `${_package2.default.name}/${version} (${_package2.default.repository})`;

let defaultHeaders = exports.defaultHeaders = {};

function setDefaultHeaders(headers) {
  instance.defaults.options = _got2.default.mergeOptions(instance.defaults.options, { headers });
}

const cookieJar = new _toughCookie2.default.CookieJar();

const instance = _got2.default.extend({
  cookieJar,
  headers: {
    'User-Agent': userAgent
  },
  retry: {
    statusCodes: [408, 413, 429, 500, 502, 504]
  },
  hooks: {
    beforeError: [err => {
      const { response } = err;

      if (err instanceof _got2.default.HTTPError) {
        if (err.statusCode === 404) {
          return new _errors2.default.NotFoundError(err.url);
        }
        return new _errors2.default.HTTPError(err.statusCode, err.statusMessage, err.url);
      } else if (err instanceof _got2.default.RequestError) {
        if (err.code === 'ETIMEDOUT') {
          return new _errors2.default.TimeoutError(err.message, err.url);
        }
        return new _errors2.default.RequestError(err.url);
      }

      return new _errors2.default.PoketoError('ERROR', err.message);
    }]
  },
  mutableDefaults: true
});

exports.default = instance;